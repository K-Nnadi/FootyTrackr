{"version":3,"file":"crud.controller.js","sourceRoot":"/","sources":["../libraries/base/crud/crud.controller.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AACA,2CAA2E;AAC3E,6CAAsD;AAS/C,MAAM,cAAc,GAAG,CAAO,MAAW,EAAE,SAAc,EAA6B,EAAE;IAC3F,MAAM,cAAc;QAChB,YAA6B,OAA4B;YAA5B,YAAO,GAAP,OAAO,CAAqB;QACzD,CAAC;QAKD,MAAM,CAAS,MAAwB;YACnC,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACvC,CAAC;QAID,MAAM;YACF,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;QACjC,CAAC;QAED,SAAS;QACT,2CAA2C;QAC3C,2CAA2C;QAC3C,+EAA+E;QAC/E,iFAAiF;QACjF,mGAAmG;QACnG,gHAAgH;QAChH,mGAAmG;QACnG,gDAAgD;QAChD,oEAAoE;QACpE,0GAA0G;QAC1G,IAAI;QAIJ,MAAM,CAAc,EAAU;YAC1B,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;QACpC,CAAC;QAKD,MAAM,CAAc,EAAU,EAAU,MAAsB;YAC1D,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;QAC5C,CAAC;QAID,MAAM,CAAc,EAAU;YAC1B,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;QACpC,CAAC;KACJ;IAzCG;QAHC,IAAA,aAAI,GAAE;QACN,IAAA,sBAAY,EAAC,EAAC,WAAW,EAAE,QAAQ,EAAC,CAAC;QACrC,IAAA,iBAAO,EAAC,EAAC,IAAI,EAAE,SAAS,EAAC,CAAC;QACnB,WAAA,IAAA,aAAI,GAAE,CAAA;;;;gDAEb;IAID;QAFC,IAAA,YAAG,GAAE;QACL,IAAA,sBAAY,EAAC,EAAC,WAAW,EAAE,QAAQ,EAAC,CAAC;;;;gDAGrC;IAiBD;QAFC,IAAA,YAAG,EAAC,KAAK,CAAC;QACV,IAAA,sBAAY,EAAC,EAAC,WAAW,EAAE,QAAQ,EAAC,CAAC;QAC9B,WAAA,IAAA,cAAK,EAAC,IAAI,CAAC,CAAA;;;;gDAElB;IAKD;QAHC,IAAA,cAAK,EAAC,KAAK,CAAC;QACZ,IAAA,sBAAY,EAAC,EAAC,WAAW,EAAE,WAAW,EAAC,CAAC;QACxC,IAAA,iBAAO,EAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;QAChB,WAAA,IAAA,cAAK,EAAC,IAAI,CAAC,CAAA;QAAc,WAAA,IAAA,aAAI,GAAE,CAAA;;;;gDAEtC;IAID;QAFC,IAAA,eAAM,EAAC,KAAK,CAAC;QACb,IAAA,sBAAY,EAAC,EAAC,WAAW,EAAE,WAAW,EAAC,CAAC;QACjC,WAAA,IAAA,cAAK,EAAC,IAAI,CAAC,CAAA;;;;gDAElB;IAGL,OAAO,cAAc,CAAA;AACzB,CAAC,CAAA;AApDY,QAAA,cAAc,kBAoD1B","sourcesContent":["import {DeepPartial} from 'typeorm';\r\nimport {Body, Delete, Get, Param, Patch, Post, Type} from '@nestjs/common';\r\nimport {ApiBody, ApiOperation} from '@nestjs/swagger';\r\nimport {CrudInterface} from \"./crud.interface\";\r\n\r\n\r\nexport interface ControllerInterface<T, U> extends Omit<CrudInterface<T, U>, \"getQuery\"> {\r\n    // getQuery(request: FastifyRequest, skip?: number, take?: number, withDeleted?: boolean, loadEagerRelations?: boolean, transaction?: boolean, comment?: string, where?: any): Promise<T[]>\r\n}\r\n\r\n\r\nexport const CrudController = <T, U>(entity: any, createDTO: any): Type<CrudInterface<T, U>> => {\r\n    class crudController<T> implements CrudInterface<T, U> {\r\n        constructor(private readonly service: CrudInterface<T, U>) {\r\n        }\r\n\r\n        @Post()\r\n        @ApiOperation({operationId: `create`})\r\n        @ApiBody({type: createDTO})\r\n        create(@Body() entity: typeof createDTO) {\r\n            return this.service.create(entity);\r\n        }\r\n\r\n        @Get()\r\n        @ApiOperation({operationId: `getAll`})\r\n        getAll() {\r\n            return this.service.getAll();\r\n        }\r\n\r\n        // @Get()\r\n        // @ApiOperation({operationId: `getQuery`})\r\n        // getQuery(@Req() request: FastifyRequest,\r\n        //          @Query('skip', new DefaultValuePipe(0), ParseIntPipe) skip: number,\r\n        //          @Query('take', new DefaultValuePipe(100), ParseIntPipe) take: number,\r\n        //          @Query('withDeleted', new DefaultValuePipe(false), ParseBoolPipe) withDeleted: boolean,\r\n        //          @Query('loadEagerRelations', new DefaultValuePipe(true), ParseBoolPipe) loadEagerRelations: boolean,\r\n        //          @Query('transaction', new DefaultValuePipe(false), ParseBoolPipe) transaction: boolean,\r\n        //          @Query('comment') comment: string) {\r\n        //     const query = qs.parse(request.url.split('?')[1], QS_OPTIONS)\r\n        //     return this.service.getQuery({...query, skip, take, withDeleted, loadEagerRelations, transaction});\r\n        // }\r\n\r\n        @Get(':id')\r\n        @ApiOperation({operationId: `getOne`})\r\n        getOne(@Param('id') id: number) {\r\n            return this.service.getOne(+id);\r\n        }\r\n\r\n        @Patch(':id')\r\n        @ApiOperation({operationId: `updateOne`})\r\n        @ApiBody({type: entity})\r\n        update(@Param('id') id: number, @Body() entity: DeepPartial<T>) {\r\n            return this.service.update(+id, entity);\r\n        }\r\n\r\n        @Delete(':id')\r\n        @ApiOperation({operationId: `deleteOne`})\r\n        delete(@Param('id') id: number) {\r\n            return this.service.delete(+id);\r\n        }\r\n    }\r\n\r\n    return crudController\r\n}\r\n"]}