{"version":3,"file":"crud.service.js","sourceRoot":"/","sources":["../libraries/base/crud/crud.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AACA,2CAAiD;AAS1C,MAAM,WAAW,GAAG,CAAO,MAAW,EAAE,SAAc,EAA6B,EAAE;IACxF,MAAM,WAAW;QACb,YAA6B,OAA4B;YAA5B,YAAO,GAAP,OAAO,CAAqB;QACzD,CAAC;QAED,MAAM,CAAS,MAAwB;YACnC,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACvC,CAAC;QAGD,MAAM;YACF,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;QACjC,CAAC;QAGD,MAAM,CAAc,EAAU;YAC1B,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;QACpC,CAAC;QAED,MAAM,CAAc,EAAU,EAAU,MAAsB;YAC1D,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;QAC5C,CAAC;QAED,MAAM,CAAc,EAAU;YAC1B,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;QACpC,CAAC;KACJ;IArBG;QAAQ,WAAA,IAAA,aAAI,GAAE,CAAA;;;;6CAEb;IAQD;QAAQ,WAAA,IAAA,cAAK,EAAC,IAAI,CAAC,CAAA;;;;6CAElB;IAED;QAAQ,WAAA,IAAA,cAAK,EAAC,IAAI,CAAC,CAAA;QAAc,WAAA,IAAA,aAAI,GAAE,CAAA;;;;6CAEtC;IAED;QAAQ,WAAA,IAAA,cAAK,EAAC,IAAI,CAAC,CAAA;;;;6CAElB;IAGL,OAAO,WAAW,CAAA;AACtB,CAAC,CAAA;AA7BY,QAAA,WAAW,eA6BvB","sourcesContent":["import {DeepPartial} from 'typeorm';\r\nimport {Body, Param, Type} from '@nestjs/common';\r\nimport {CrudInterface} from \"./crud.interface\";\r\n\r\n\r\nexport interface ServiceInterface<T, U> extends Omit<CrudInterface<T, U>, \"getQuery\"> {\r\n    // getQuery(request: FastifyRequest, skip?: number, take?: number, withDeleted?: boolean, loadEagerRelations?: boolean, transaction?: boolean, comment?: string, where?: any): Promise<T[]>\r\n}\r\n\r\n\r\nexport const CrudService = <T, U>(entity: any, createDTO: any): Type<CrudInterface<T, U>> => {\r\n    class crudService<T> implements CrudInterface<T, U> {\r\n        constructor(private readonly service: CrudInterface<T, U>) {\r\n        }\r\n\r\n        create(@Body() entity: typeof createDTO) {\r\n            return this.service.create(entity);\r\n        }\r\n\r\n\r\n        getAll() {\r\n            return this.service.getAll();\r\n        }\r\n\r\n\r\n        getOne(@Param('id') id: number) {\r\n            return this.service.getOne(+id);\r\n        }\r\n\r\n        update(@Param('id') id: number, @Body() entity: DeepPartial<T>) {\r\n            return this.service.update(+id, entity);\r\n        }\r\n\r\n        delete(@Param('id') id: number) {\r\n            return this.service.delete(+id);\r\n        }\r\n    }\r\n\r\n    return crudService\r\n}\r\n"]}